version: '3.4'

volumes:
  tmarabbitmq: 
  logs-tma: 
  
networks:
  internal-network:

services:
  tma.reverse.proxy:
    image: nginx:1.17.10
    container_name: tma.reverse.proxy
    networks:
      - internal-network
    depends_on:
      - tma.identityservice
      - tma.web
    ports:
      - 9999:80
    build:
      context: ./Automation
      dockerfile: nginx.Dockerfile

  tmadb:
    image: postgres:12.3-alpine
    restart: always
    networks:
      - internal-network
    environment:
      POSTGRES_PASSWORD: test
      POSTGRES_USER: test_user
      POSTGRES_DB: test_db

  tmarabbitmq:
    image: rabbitmq:3.7.13-management-alpine
    environment:
    - RABBITMQ_DEFAULT_USER=tma-user
    - RABBITMQ_DEFAULT_VHOST=tma
    - RABBITMQ_DEFAULT_PASS=tma-password
    networks:
      - internal-network
    ports:
     - '15676:15672'
    volumes:
     - 'tmarabbitmq:/var/lib/rabbitmq'
    container_name: 'tmarabbitmq'
    restart: 'unless-stopped'

  start-dependencies:
    image: 'dadarek/wait-for-dependencies:0.1'
    tty: true
    command: 'tmarabbitmq:5672'
    networks:
      - internal-network
    stdin_open: true
    depends_on:
    - 'tmarabbitmq'
    - 'tma.sln'
    container_name: 'tma.start.dependencies'

  tma.sln:
    image: ${DOCKER_REGISTRY-}tma.sln
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}

  tma.web:
    image: ${DOCKER_REGISTRY-}tmaweb
    container_name: tma.web
    networks:
      - internal-network
    depends_on:
      - start-dependencies
    build:
      context: .
      dockerfile: TMA.Web/Dockerfile
      args:
        SLN_IMAGE: ${DOCKER_REGISTRY-}tma.sln
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    restart: "unless-stopped"
    environment:
      - DOTNETCORE_ENVIRONMENT=${RUN_ENVIRONMENT:-Development}
    volumes:
      - 'logs-tma:/var/log/tma'

  tma.principalservice:
    image: ${DOCKER_REGISTRY-}tmaprincipalservice
    container_name: tma.principalservice
    networks:
      - internal-network
    depends_on:
      - start-dependencies
    build:
      context: .
      dockerfile: TMA.PrincipalService/Dockerfile
      args:
        SLN_IMAGE: ${DOCKER_REGISTRY-}tma.sln
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    restart: "unless-stopped"
    environment:
      - DOTNETCORE_ENVIRONMENT=${RUN_ENVIRONMENT:-Development}
    volumes:
      - 'logs-tma:/var/log/tma'

  tma.identityservice:
    image: ${DOCKER_REGISTRY-}tmaidentityservice
    container_name: tma.identityservice
    networks:
      - internal-network
    depends_on:
      - start-dependencies
    build:
      context: .
      dockerfile: TMA.IdentityService/Dockerfile
      args:
        SLN_IMAGE: ${DOCKER_REGISTRY-}tma.sln
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    restart: "unless-stopped"
    environment:
      - DOTNETCORE_ENVIRONMENT=${RUN_ENVIRONMENT:-Development}
    volumes:
      - 'logs-tma:/var/log/tma'

  tma.movieservice:
    image: ${DOCKER_REGISTRY-}tmamovieservice
    container_name: tma.movieservice
    networks:
      - internal-network
    depends_on:
      - start-dependencies
    build:
      context: .
      dockerfile: TMA.MovieService/Dockerfile
      args:
        SLN_IMAGE: ${DOCKER_REGISTRY-}tma.sln
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    restart: "unless-stopped"
    environment:
      - DOTNETCORE_ENVIRONMENT=${RUN_ENVIRONMENT:-Development}
    volumes:
      - 'logs-tma:/var/log/tma'